#!/usr/bin/perl

# Licenced under GPL

# Magic markers
#%# family=auto
#%# capabilities=autoconf

use strict;
use DBI;
use vars qw ( $debug $configure $dbh );

# Package maintainers should provide an environment
# file for the /etc/munin/plugin-conf.d/ directory
# to override these values if necessary.
# NOTE: The plugin (also when auto configured) should
# be run by the postgresql user account.

# Need these variables at an early stage to enable
# autoconf
my $dbhost = $ENV{'dbhost'} || ''; # Connect to localhost by default
my $dbname = $ENV{'dbname'} || 'template1';
my $dbuser = $ENV{'dbuser'} || 'konyvelo';
my $dbpass = $ENV{'dbpass'} || 'pwd';
my @listed_dbnames = ("fokonyv2007","kvizsg2007","beszamolo");   # Listed Database names

if (exists $ARGV[0]) {
    if ($ARGV[0] eq 'autoconf') {
        # Check for DBD::Pg
        if (! eval "require DBD::Pg;") {
            print "no (DBD::Pg not found)";
            exit 1;
        }
        # Then we try to detect Postgres presence by connecting to
        # 'template1'.
        my $dsn = "dbi:Pg:dbname=template1";
        $dsn .= ";host=$dbhost" if $dbhost;
        print "#$dsn\n" if $debug;
        my $tempdbh = DBI->connect ($dsn, $dbuser, $dbpass);
        if ($tempdbh) {
            print "yes\n";
            exit 0;
        } else {
            print "no (Can't connect to given host, please check environment settings)\n";
            exit 1;
        }
    } elsif ($ARGV[0] and $ARGV[0] eq 'debug') {
        # Set config flag
        $debug = 1;
    } elsif ($ARGV[0] and $ARGV[0] eq 'config') {
        # Set config flag
        $configure = 1;
    } 
}



if ($configure) {


 print "graph_args --lower-limit 0\n";
 print "graph_category PostgreSQL\n";
 print "graph_info Shows active locks on database server.\n";
 print "graph_scale no\n";
 print "graph_title PostgreSQL Active Locks\n";
 print "graph_vlabel Number of active locks\n";

 foreach my $ldbn (@listed_dbnames) 
 {

  print "AccessExclusive_$ldbn.label $ldbn AccessExclusive\n";
  print "AccessExclusive_$ldbn.info $ldbn Access Exclusive Lock.\n";
  print "AccessShare_$ldbn.label $ldbn AccessShare\n";
  print "AccessShare_$ldbn.info $ldbn Access Share Lock.\n";
  print "Exclusive_$ldbn.label $ldbn Exclusive\n";
  print "Exclusive_$ldbn.info $ldbn Exclusive Lock.\n";
  print "RowExclusive_$ldbn.label $ldbn RowExclusive\n";
  print "RowExclusive_$ldbn.info $ldbn Row Exclusive Lock.\n";
  print "RowShare_$ldbn.label $ldbn RowShare\n";
  print "RowShare_$ldbn.info $ldbn Row Share Lock.\n";
  print "Share_$ldbn.label $ldbn Share\n";
  print "Share_$ldbn.info $ldbn Share Lock.\n";
  print "ShareRowExclusive_$ldbn.label $ldbn ShareRowExclusive\n";
  print "ShareRowExclusive_$ldbn.info $ldbn Share Row Exclusive Lock.\n";
  print "ShareUpdateExclusive_$ldbn.label $ldbn ShareUpdateExclusive\n";
  print "ShareUpdateExclusive_$ldbn.info $ldbn Share Update Exclusive Lock.\n";

 }
} else {

  my @datasources = DBI->data_sources ('Pg')
    or die ("Can't read any possible data sources: $?");

  foreach my $ldbn (@listed_dbnames)
  {
   my $dsn = "DBI:Pg:dbname=$ldbn";
   $dsn .= ";host=$dbhost" if $dbhost;
   print "#$dsn\n" if $debug;
   my $dbh = DBI->connect ($dsn, $dbuser, $dbpass, {RaiseError =>1});
   unless($dbh) {
    die("Database $dbname\@$dbhost (". $DBI::errstr .")\n");
  }

#   my $q_ind = "SELECT trim(mode, 'Lock') as mod, COUNT(*) as db FROM pg_locks GROUP BY mode ORDER BY 1;";

    my $q_ind = "select mode,sum(value) from (
     select 'AccessExclusive' as mode ,0 as value union all 
     select 'AccessShare' as mode ,0 as value union all
     select 'Exclusive' as mode ,0 as value union all
     select 'RowExclusive' as mode ,0 as value union all
     select 'RowShare' as mode ,0 as value union all
     select 'Share' as mode ,0 as value union all
     select 'ShareRowExclusive' as mode ,0 as value union all
     select 'ShareUpdateExclusive' as mode ,0 as value union all
     SELECT trim(mode, 'Lock'), COUNT(*) as value
                    FROM pg_locks GROUP BY mode) as fos
                      GROUP BY mode ORDER BY 1;";
   
   my $sth = $dbh->prepare ($q_ind) or die $dbh->errstr;

   $sth->execute () or die $dbh->errstr;
   while (my ($mod,$db) = $sth->fetchrow_array) {
     print $mod."_".$ldbn.".value ".$db."\n";
    }
    $sth->finish;

   $dbh->disconnect;
  }
}

